%{
#include <stdlib.h>
#include <string.h>

typedef struct {
	char atom[100];
	int codAtom;
	int codAtomTS;
}FIP;

typedef struct {
	char atom[100];
	int codAtomTS;
}TS;

int lenFIP = 0, lenTS = 0, codTS = 0;
FIP fip[300];
TS ts[300];
int currentLine = 1;

void addToFIP(char atom[], int codAtom, int codAtomTS) {
	lenFIP++;
	strcpy(fip[lenFIP - 1].atom, atom);
	fip[lenFIP - 1].codAtom = codAtom;
	fip[lenFIP - 1].codAtomTS = codAtomTS;
}

int addToTS(char atom[]) {
	int i, j;
	for (i = 0; i < lenTS; i++) {
		if (strcmp(ts[i].atom, atom) == 0) {
			return ts[i].codAtomTS;
		}
	}
	if ((lenTS == 0) || (strcmp(ts[lenTS - 1].atom, atom) < 0)) {
		strcpy(ts[lenTS].atom, atom);
		ts[lenTS].codAtomTS = codTS;
		codTS++; lenTS++;
	}
	else if (strcmp(ts[0].atom, atom) > 0) {
		lenTS++;
		for (i = lenTS; i > 0; i--)
			ts[i] = ts[i - 1];
		strcpy(ts[0].atom, atom);
		ts[0].codAtomTS = codTS;
		codTS++;
	}
	else {
		i = 0;
		while (strcmp(ts[i].atom, atom) < 0)
			i++;
		lenTS++;
		for (j = lenTS; j > i; j--)
			ts[j] = ts[j - 1];
		strcpy(ts[i].atom, atom);
		ts[i].codAtomTS = codTS;
		codTS++;
	}
	return codTS - 1;
}

void printTS() {
	printf("TABELA DE SIMBOLURI:\n");
	int i;
	for (i = 0; i < lenTS; i++)
		printf("%s  |  %d\n", ts[i].atom, ts[i].codAtomTS);
	printf("\n");
}

void printFIP() {
	printf("FORMA INTERNA A PROGRAMULUI:\n");
	int i;
	for (i = 0; i < lenFIP; i++)
		if (fip[i].codAtomTS == -1)
			printf("%s  |  %d  |  -\n", fip[i].atom, fip[i].codAtom);
		else
			printf("%s  |  %d  |  %d\n", fip[i].atom, fip[i].codAtom, fip[i].codAtomTS);
}
%}

%option noyywrap

DIGIT 		[0-9] 
ID 		[a-z][a-z0-9]*
KEYWORD		repeta|panacand|sfrepeta|program|begin|var|type|end|integer|real|if|while|readln|writeln|then|else
OPERATOR	"+"|"-"|"*"|"="|">"|"<"|"<>"
SEPARATOR	","|"."|":"|";"|"("|")"

%%

{KEYWORD} {
	int codAtom = -1;
	if (strcmp("program", yytext) == 0) codAtom = 2;
	if (strcmp("begin", yytext) == 0) codAtom = 3;
	if (strcmp("var", yytext) == 0) codAtom = 4;
	if (strcmp("type", yytext) == 0) codAtom = 5;
	if (strcmp("end", yytext) == 0) codAtom = 6;
	if (strcmp("integer", yytext) == 0) codAtom = 7;
	if (strcmp("real", yytext) == 0) codAtom = 8;
	if (strcmp("if", yytext) == 0) codAtom = 9;
	if (strcmp("while", yytext) == 0) codAtom = 10;
	if (strcmp("readln", yytext) == 0) codAtom = 11;
	if (strcmp("writeln", yytext) == 0) codAtom = 12;
	if (strcmp("then", yytext) == 0) codAtom = 13;
	if (strcmp("else", yytext) == 0) codAtom = 14;
	if (strcmp("repeta", yytext) == 0) codAtom = 28;
	if (strcmp("panacand", yytext) == 0) codAtom = 29;
	if (strcmp("sfrepeta", yytext) == 0) codAtom = 30;
	addToFIP(yytext, codAtom, -1);
}

{ID}{1,8} {
	int codTS = addToTS(yytext);
	addToFIP(yytext, 0, codTS);
}

{DIGIT}+ {
	int codTS = addToTS(yytext);
	addToFIP(yytext, 1, codTS);
}

{DIGIT}"."{DIGIT}{DIGIT}* {
	int codTS = addToTS(yytext);
	addToFIP(yytext, 1, codTS);
}

{OPERATOR} {
	int codAtom = -1;
	if (strcmp("+", yytext) == 0) codAtom = 15;
	if (strcmp("-", yytext) == 0) codAtom = 16;
	if (strcmp("*", yytext) == 0) codAtom = 17;
	if (strcmp("=", yytext) == 0) codAtom = 18;
	if (strcmp(">", yytext) == 0) codAtom = 19;
	if (strcmp("<", yytext) == 0) codAtom = 20;
	if (strcmp("<>", yytext) == 0) codAtom = 21;
	addToFIP(yytext, codAtom, -1);
}

{SEPARATOR} {
	int codAtom = -1;
	if (strcmp(",", yytext) == 0) codAtom = 22;
	if (strcmp(".", yytext) == 0) codAtom = 23;
	if (strcmp(":", yytext) == 0) codAtom = 24;
	if (strcmp(";", yytext) == 0) codAtom = 25;
	if (strcmp("(", yytext) == 0) codAtom = 26;
	if (strcmp(")", yytext) == 0) codAtom = 27;
	addToFIP(yytext, codAtom, -1);
}

[\n] {
	currentLine++;
}

[ \t\n]+ ;

. {
	printf("Error on line %d. Unrecognized character: %s\n", currentLine, yytext);
}


%% 
int main(argc, argv) 
int argc; 
char **argv; 
{ 
	++argv, --argc;
	if (argc > 0) 
		yyin = fopen(argv[0], "r"); 
	else 
		yyin = stdin; 
	yylex();
	printTS();
	printFIP();
}